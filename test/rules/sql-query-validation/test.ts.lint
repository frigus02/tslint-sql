export interface Query {
  name?: string;
  text: string;
  values: any[];
}

export const sql = (name: string) => (
  strings: TemplateStringsArray,
  ...values: any[]
): Query => ({
  name,
  text: String.raw(strings, ...values.map((_, i) => `$${i + 1}`)),
  values
});

export const createOrder = (
  userId: string,
  notes: string?
) => sql("create-order")`
  INSERT INTO orders(
    user_id,
    notes,
    status,
    created_at,
    updated_at
  ) VALUES(
    ${userId},
      ~~~~~~   [Types: Parameter orders.user_id is type number but got type string]
    ${notes},
      ~~~~~   [Types: Parameter orders.notes is type string but got type string | null]
    'created',
    NOW(),
    NOW()
  )
  RETURNING *
`;

export const updateOrderStatus = (
  orderId: number,
  newStatus: string
) => sql("update-order-status")`
  UPDATE
    orders
  SET
    status = ${newStatus},
               ~~~~~~~~~   [Types: Parameter orders.status is type "created" | "packaged" | "received" | "returned" | "shipped" but got type string]
    updated_at = ${new Date().toISOString()}
                   ~~~~~~~~~~~~~~~~~~~~~~~~  [Types: Parameter orders.updated_at is type Date but got type string]
  WHERE
    order_id = ${orderId}
`;

export const getOrder = (orderId: number) => sql("get-order")`
  SELECT * FROM orders WHERE order_id = ${orderId}
`;

export const getOutstandingOrdersForUser = (orderId: number, userId: string) => sql(
  "get-outstanding-orders-for-user"
)`
  SELECT
    o.order_id,
    o.notes,
    o.created_at AS order_created_at,
    o.status,
    u.user_id,
    u.first_name,
    u.last_name
  FROM
    orders o
    LEFT JOIN users u ON o.user_id = u.user_id
  WHERE
    o.order_id = ${orderId}
    AND o.userid = ${userId}
                     ~~~~~~  [Types: Cannot find type for parameter orders.userid in schema]
    AND o.status IN ('created', ${"packaged"}, 'shipped')
`;

export const geOrdersByStatus = (statuses: string[]) => sql(
  "get-orders-by-status"
)`
  SELECT
    *
  FROM
    orders o
  WHERE
    status = ANY (${statuses})
                    ~~~~~~~~   [Types: Parameter orders.status is type "created" | "packaged" | "received" | "returned" | "shipped" but got type string[]]
`;

export const getOrdersByShippingCompany = (company: number) => sql(
  "get-orders-by-shipping-company"
)`
  SELECT
    user_id,
    name
  FROM
    orders
  WHERE
    status >= 'shipped'
  AND
    shipment_data ->> 'company' = ${company}
                                    ~~~~~~~  [Types: Parameter orders.shipment_data.company is type string | null but got type number]
`;

export const deleteProduct = (productId: string) => sql("delete-product")`
  DELETE FROM products WHERE product_id = ${productId}
                                            ~~~~~~~~~                      [Types: Parameter products.product_id is type number but got type string]
`;
